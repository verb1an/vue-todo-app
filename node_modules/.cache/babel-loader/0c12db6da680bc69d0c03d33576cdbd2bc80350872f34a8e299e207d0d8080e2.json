{"ast":null,"code":"import { normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, mergeProps as _mergeProps, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nvar _withScopeId = function _withScopeId(n) {\n  return _pushScopeId(\"data-v-86d42058\"), n = n(), _popScopeId(), n;\n};\nvar _hoisted_1 = [\"value\", \"ttr\", \"maxlength\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _mergeProps({\n    \"class\": \"component text\"\n  }, _ctx.$attrs, {\n    style: \"height:\".concat($setup.todoTextHeight, \"px;\")\n  }), [_createElementVNode(\"textarea\", {\n    type: \"text\",\n    \"class\": \"text__item\",\n    value: $props.modelValue,\n    ttr: $props.modelValue,\n    maxlength: $props.maxLength,\n    onInput: $setup.returnValue,\n    onChange: $setup.returnValue,\n    onBlur: $setup.removeFocus,\n    ref: \"item\",\n    style: _normalizeStyle(\"overflow-y: \".concat($setup.todoTextHeight >= 200 ? 'scroll' : 'hidden'))\n  }, null, 44 /* STYLE, PROPS, HYDRATE_EVENTS */, _hoisted_1)], 16 /* FULL_PROPS */);\n}","map":{"version":3,"names":["_createElementBlock","_mergeProps","_ctx","$attrs","style","concat","$setup","todoTextHeight","_createElementVNode","type","value","$props","modelValue","ttr","maxlength","maxLength","onInput","returnValue","onChange","onBlur","removeFocus","ref","_normalizeStyle"],"sources":["C:\\Users\\Setis\\Documents\\alex\\vue-todo-app\\src\\components\\AppTodoText.vue"],"sourcesContent":["<template>\r\n    <div class=\"component text\" v-bind=\"$attrs\" :style=\"`height:${todoTextHeight}px;`\" >\r\n        <textarea\r\n            type=\"text\"\r\n            class=\"text__item\"\r\n            :value=\"modelValue\"\r\n            :ttr=\"modelValue\"\r\n            :maxlength=\"maxLength\"\r\n            @input=\"returnValue\"\r\n            @change=\"returnValue\"\r\n\r\n            @blur=\"removeFocus\"\r\n            ref=\"item\"\r\n            :style=\"`overflow-y: ${todoTextHeight >= 200 ? 'scroll' : 'hidden'}`\"\r\n        ></textarea>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: \"app-todo-text\",\r\n};\r\n</script>\r\n\r\n<script setup>\r\nimport { defineEmits, defineProps, onMounted, ref, useAttrs } from \"vue\";\r\n\r\nconst props = defineProps({\r\n    modelValue: { type: String, required: false, default: \"\" },\r\n    placeholder: { type: String, required: false, default: \"\" },\r\n    focus: { type: Boolean, required: false, default: false },\r\n    maxLength: { type: Number, required: false, default: 512 }\r\n});\r\nconst emit = defineEmits([\"input\", \"update:modelValue\", \"input:addInput\"]);\r\nconst attrs = useAttrs();\r\n\r\nconst item = ref(null);\r\nconst todoTextHeight = ref(20);\r\n\r\nfunction returnValue(event) {\r\n    textAreaHeightResizeFunction(event.target.value.replaceAll('\\n', \"</br>\"), event.target.getBoundingClientRect().width, getComputedStyle(event.target).fontSize)\r\n    emit(\"update:modelValue\", event.target.value);\r\n}\r\n\r\nfunction textAreaHeightResizeFunction (value, width, font) {\r\n    \r\n    const blockForInfo = document.createElement('div');\r\n\r\n    blockForInfo.className = \"textAreaHeightResize\";\r\n    document.querySelector(\"main\").append(blockForInfo);\r\n\r\n    blockForInfo.innerHTML = '';\r\n    blockForInfo.innerHTML = value;\r\n\r\n    blockForInfo.style = `width: ${width}px; word-wrap: break-word; font-size: ${font};`;\r\n    \r\n    let newHeight = blockForInfo.getBoundingClientRect().height + 5;\r\n    if(attrs.class == 'default') newHeight += 19; // <!-- ? Default text first line-break padding -->\r\n\r\n    if(newHeight < 20) newHeight = 20;\r\n    else if (newHeight > 200) newHeight = 200;\r\n\r\n    todoTextHeight.value = newHeight;\r\n\r\n    blockForInfo.remove();\r\n\r\n}\r\n\r\nfunction removeFocus(event) {\r\n    emit(\"update:blur\", event.target)\r\n}\r\n\r\nonMounted(() => {\r\n    textAreaHeightResizeFunction( props.modelValue.replaceAll('\\n', \"</br>\"), item.value.getBoundingClientRect().width )\r\n    if( props.focus == true ) {\r\n        item.value.focus();\r\n    }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@use '@/assets/scss/vars';\r\n.component.text {\r\n    textarea {\r\n        background-color: transparent;\r\n        border: none;\r\n        outline: none;\r\n        resize: none;\r\n\r\n        font-size: 14px;\r\n        font-weight: 400;\r\n        color: vars.$color-g-white;\r\n        transition: 1s;\r\n        line-height: 18px;\r\n\r\n        width: 100%;\r\n        height: 100%;\r\n    }\r\n\r\n    &.default {\r\n\r\n        textarea {\r\n\r\n            &::placeholder {\r\n                color: vars.$color-g-white;\r\n            }\r\n        }\r\n\r\n        &[status='true'] {\r\n            textarea {\r\n                text-decoration: line-through;\r\n            }\r\n        }\r\n    }\r\n}\r\n</style>\r\n"],"mappings":";;;;;;uBACIA,mBAAA,CAcM,OAdNC,WAAA,CAcM;IAdD,SAAM;EAAgB,GAASC,IAAA,CAAAC,MAAM;IAAGC,KAAK,YAAAC,MAAA,CAAYC,MAAA,CAAAC,cAAc;OACxEC,mBAAA,CAYY;IAXRC,IAAI,EAAC,MAAM;IACX,SAAM,YAAY;IACjBC,KAAK,EAAEC,MAAA,CAAAC,UAAU;IACjBC,GAAG,EAAEF,MAAA,CAAAC,UAAU;IACfE,SAAS,EAAEH,MAAA,CAAAI,SAAS;IACpBC,OAAK,EAAEV,MAAA,CAAAW,WAAW;IAClBC,QAAM,EAAEZ,MAAA,CAAAW,WAAW;IAEnBE,MAAI,EAAEb,MAAA,CAAAc,WAAW;IAClBC,GAAG,EAAC,MAAM;IACTjB,KAAK,EAAAkB,eAAA,gBAAAjB,MAAA,CAAiBC,MAAA,CAAAC,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}